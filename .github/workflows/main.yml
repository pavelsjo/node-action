# This is a basic workflow to help you get started with Actions
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Write Config & Key Files
        run: |
          mkdir ~/.oci
          echo "[DEFAULT]" >> ~/.oci/config
          echo "user=${{secrets.OCI_USER_OCID}}" >> ~/.oci/config
          echo "fingerprint=${{secrets.OCI_FINGERPRINT}}" >> ~/.oci/config
          echo "region=${{secrets.OCI_REGION}}" >> ~/.oci/config
          echo "tenancy=${{secrets.OCI_TENANCY_OCID}}" >> ~/.oci/config
          echo "key_file=~/.oci/key.pem" >> ~/.oci/config
          echo "${{secrets.OCI_KEY_FILE}}" >> ~/.oci/key.pem
      - name: log untrusted output
        run: |

          # disable command workflow processing
          echo "::stop-commands::`echo -n ${{ github.token }} | sha256sum | head -c 64`"

          # log untrusted output
          echo "untrusted output"

          # enable workflow command processing
          echo "::`echo -n ${{ github.token }} | sha256sum | head -c 64`::"
      
      - name: Install OCI CLI
        run: |
          curl -L -O https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh
          chmod +x install.sh
          ./install.sh --accept-all-defaults
          echo "::add-path::/home/runner/bin"
          exec -l $SHELL
      
      - name: Fix Config File Permissions
        run: |
          oci setup repair-file-permissions --file /home/runner/.oci/config
          oci setup repair-file-permissions --file /home/runner/.oci/key.pem
        
      - name: Download the KUBECONFIG
        run: |
          mkdir -p ~/.kube
          oci ce cluster create-kubeconfig --cluster-id ${{ secrets.OKE_OCID }} --file $HOME/.kube/config --region ${{ secrets.OCI_REGION }} --token-version 2.0.0 --kube-endpoint PUBLIC_ENDPOINT
          export KUBECONFIG=~/.kube/config
          
      - name: 'Deploy the API on OKE'
        run: |
          kubectl delete deployment $DEPLOYMENT_NAME
          kubectl create deployment $DEPLOYMENT_NAME --image=$IMAGE_NAME --dry-run -o yaml > deployment.yaml
          kubectl apply -f deployment.yaml
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
          kubectl apply -f service.yaml
          kubectl get services -o wide
